###pseudocode for beacon-fi###
------------------------------------------
###init.lua###
<code for init.lua, the first thing that runs on ESP on boot>

blink blue LED (TX)
wait 1 sec    

blink blue LED (TX)
wait 1 sec

blink blue LED (TX)
wait 1 sec

compile main_loop.lua
run main_loop.lua



------------------------------------------
###main_loop.lua###
<code for main_loop.lua, a script which searches for open WiFi networks and blinks an LED if there are networks>

#define some variables
hide_and_seek_mode = false
hide-and-seek-AP-SSIDs= ['ESP123','ESP234','ESP345',etc.] for example
found_open_wifi = false
signal_strength = low number
previous_signal_strength = another low number
min_strength = -75 #the minimum strength a signal must have to trigger fast blinking
default_sleep_interval = 10000 ;
is_first_time = true;


#a function that scans for WiFi networks
<<<<<<< HEAD
function look_around_for_open_WiFi():
	list_of_APs=list of all visible APs   #this generates a listoflists with a built-in function wifi.sta.getap(list_of_APs); each AP has SSID, RSSI, channel, encryption type, MAC address, etc.
=======
function scan_WiFi():
	generate a list of APs with a built-in function wifi.sta.getap(list_of_APs); each AP has SSID, RSSI, channel, encryption type, MAC address, etc.
	call parse_AP_list(list_of_APs) function, sending fresh list of APs
end

#a function that parses a list of APs and returns the 'best' one
function parse_list_of_APs():
	for AP in list_of_APs:
>>>>>>> origin/master

	temp_max_strength = -100 #this variable keeps the highest AP strength among all APs
	previous_signal_strength = signal_strength
	for AP in list_of_APs:
			if hide_and_seek_mode = true:     #once hide and seek mode is activated...
				if AP[ssid] is in hide-and-seek-AP-SSIDs:    #looks only for 'hide-and-seek' SSIDs
					if AP[rssi] < temp_max_strength:  #if signal is stronger than previous 'hide-and-seek' APs
					temp_max_strength==AP[rssi]  #sets temp_max_strength to dB value (negative)
				
			elif AP[ssid] is in hide-and-seek-AP-SSIDs :    #turns ESP into 'hide-and-seek' mode if special APs are found
				hide_and_seek_mode = true 
				temp_max_strength==AP[rssi]

			elif AP[encryption] is open:
				found_free_wifi = true
				if AP[rssi] < temp_max_strength:  #if signal is stronger than previous open APs
						temp_max_strength==AP[rssi]  #sets temp_max_strength to dB value (negative)
		else:
			found_open_wifi = false   #if no open networks found, sets found_open_wifi to false
		signal_strength = temp_max_strength	




#smoothing function
function smooth(previous_signal_strength,signal_strength)
	return (signal_strength + previous_signal_strength) / 2  

#function that taken the strength outputs the sleep_time
function transform(strength)
	return (strength*strength) / 5 seconds #transforms -dBs to milliseconds,


# a function which blinks a LED when a suitable AP is found, varying the frequency according to signal strength	
function blink_external_led():
	impulse(); 
	sleep_time = default_sleep_interval; 
	if signal_strength > min_strength
		if is_first_time
			sleep_time = transform(signal_strength)
		else
			smoothed_strength = smooth (previous_signal_strength,signal_strength) 
			sleep_time = transform(smoothed_strength)
	sleep (something)
	blink_external_led()



# a function which blinks the blue LED if in hide_and_seek_mode
function blink_blue_led():
	if hide_and_seek_mode 
		print "something" #this will make the blue LED blink
	else
		#do nothing
	wait 10 s
	blink_blue_led()


# call the main function
look_around_for_open_WiFi()
blink_external_led()
blink_blue_led()
